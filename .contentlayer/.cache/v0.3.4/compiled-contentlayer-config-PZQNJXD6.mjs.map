{
  "version": 3,
  "sources": ["../../../contentlayer.config.ts", "../../../documents/project.ts", "../../../documents/blog.ts"],
  "sourcesContent": ["import { makeSource } from 'contentlayer/source-files'\r\nimport { Project } from './documents/project'\r\nimport { Blog } from './documents/blog'\r\n\r\nexport default makeSource({\r\n    contentDirPath: 'contents',\r\n    documentTypes: [Project, Blog],\r\n})", "import { defineDocumentType } from \"contentlayer/source-files\"\r\n\r\nexport const Project = defineDocumentType(() => ({\r\n    name: 'Project',\r\n    filePathPattern: `projects/*.mdx`,\r\n    contentType: 'mdx',\r\n    fields: {\r\n        label: {\r\n            type: 'enum',\r\n            options: ['real', 'dummy'],\r\n            description: 'The type of the project',\r\n            required: true,\r\n        },\r\n        title: {\r\n            type: 'string',\r\n            description: 'The title of the project',\r\n            required: true,\r\n        },\r\n        description: {\r\n            type: 'string',\r\n            description: 'The description of the project',\r\n            required: true,\r\n        },\r\n        techstack: {\r\n            type: 'list',\r\n            of: { type: 'string' },\r\n            description: 'The techstack of the project',\r\n            required: true,\r\n        },\r\n        urlgithub: {\r\n            type: 'string',\r\n            description: 'The url github of the project',\r\n            required: false,\r\n        },\r\n        urlweb: {\r\n            type: 'string',\r\n            description: 'The url web demo of the project',\r\n            required: false,\r\n        },\r\n        date: {\r\n            type: 'date',\r\n            description: 'The date of the project',\r\n            required: true,\r\n        },\r\n    },\r\n    computedFields: {\r\n        slug: {\r\n            type: 'string',\r\n            resolve: (doc) => doc._raw.flattenedPath.replace(/^projects\\//, ''),\r\n        },\r\n        image: {\r\n            type: 'string',\r\n            description: 'The url image of the project',\r\n            resolve: (doc) => {\r\n                return `/contentlayer/${doc._raw.flattenedPath}.png`\r\n            },\r\n        },\r\n    },\r\n}))", "import { defineDocumentType } from \"contentlayer/source-files\"\r\n\r\nexport const Blog = defineDocumentType(() => ({\r\n    name: 'Blog',\r\n    filePathPattern: `blogs/*.mdx`,\r\n    contentType: 'mdx',\r\n    fields: {\r\n        label: {\r\n            type: 'string',\r\n            description: 'The type of the blog',\r\n            required: true,\r\n        },\r\n        title: {\r\n            type: 'string',\r\n            description: 'The title of the blog',\r\n            required: true,\r\n        },\r\n        description: {\r\n            type: 'string',\r\n            description: 'The description of the blog',\r\n            required: true,\r\n        },\r\n        date: {\r\n            type: 'date',\r\n            description: 'The date of the blog',\r\n            required: true,\r\n        },\r\n    },\r\n    computedFields: {\r\n        slug: {\r\n            type: 'string',\r\n            resolve: (doc) => doc._raw.flattenedPath.replace(/^blogs\\//, ''),\r\n        },\r\n        image: {\r\n            type: 'string',\r\n            description: 'The url image of the blogs',\r\n            resolve: (doc) => {\r\n                return `/contentlayer/${doc._raw.flattenedPath}.png`\r\n            },\r\n        },\r\n    },\r\n}))"],
  "mappings": ";AAAA,SAAS,kBAAkB;;;ACA3B,SAAS,0BAA0B;AAE5B,IAAM,UAAU,mBAAmB,OAAO;AAAA,EAC7C,MAAM;AAAA,EACN,iBAAiB;AAAA,EACjB,aAAa;AAAA,EACb,QAAQ;AAAA,IACJ,OAAO;AAAA,MACH,MAAM;AAAA,MACN,SAAS,CAAC,QAAQ,OAAO;AAAA,MACzB,aAAa;AAAA,MACb,UAAU;AAAA,IACd;AAAA,IACA,OAAO;AAAA,MACH,MAAM;AAAA,MACN,aAAa;AAAA,MACb,UAAU;AAAA,IACd;AAAA,IACA,aAAa;AAAA,MACT,MAAM;AAAA,MACN,aAAa;AAAA,MACb,UAAU;AAAA,IACd;AAAA,IACA,WAAW;AAAA,MACP,MAAM;AAAA,MACN,IAAI,EAAE,MAAM,SAAS;AAAA,MACrB,aAAa;AAAA,MACb,UAAU;AAAA,IACd;AAAA,IACA,WAAW;AAAA,MACP,MAAM;AAAA,MACN,aAAa;AAAA,MACb,UAAU;AAAA,IACd;AAAA,IACA,QAAQ;AAAA,MACJ,MAAM;AAAA,MACN,aAAa;AAAA,MACb,UAAU;AAAA,IACd;AAAA,IACA,MAAM;AAAA,MACF,MAAM;AAAA,MACN,aAAa;AAAA,MACb,UAAU;AAAA,IACd;AAAA,EACJ;AAAA,EACA,gBAAgB;AAAA,IACZ,MAAM;AAAA,MACF,MAAM;AAAA,MACN,SAAS,CAAC,QAAQ,IAAI,KAAK,cAAc,QAAQ,eAAe,EAAE;AAAA,IACtE;AAAA,IACA,OAAO;AAAA,MACH,MAAM;AAAA,MACN,aAAa;AAAA,MACb,SAAS,CAAC,QAAQ;AACd,eAAO,iBAAiB,IAAI,KAAK,aAAa;AAAA,MAClD;AAAA,IACJ;AAAA,EACJ;AACJ,EAAE;;;AC1DF,SAAS,sBAAAA,2BAA0B;AAE5B,IAAM,OAAOA,oBAAmB,OAAO;AAAA,EAC1C,MAAM;AAAA,EACN,iBAAiB;AAAA,EACjB,aAAa;AAAA,EACb,QAAQ;AAAA,IACJ,OAAO;AAAA,MACH,MAAM;AAAA,MACN,aAAa;AAAA,MACb,UAAU;AAAA,IACd;AAAA,IACA,OAAO;AAAA,MACH,MAAM;AAAA,MACN,aAAa;AAAA,MACb,UAAU;AAAA,IACd;AAAA,IACA,aAAa;AAAA,MACT,MAAM;AAAA,MACN,aAAa;AAAA,MACb,UAAU;AAAA,IACd;AAAA,IACA,MAAM;AAAA,MACF,MAAM;AAAA,MACN,aAAa;AAAA,MACb,UAAU;AAAA,IACd;AAAA,EACJ;AAAA,EACA,gBAAgB;AAAA,IACZ,MAAM;AAAA,MACF,MAAM;AAAA,MACN,SAAS,CAAC,QAAQ,IAAI,KAAK,cAAc,QAAQ,YAAY,EAAE;AAAA,IACnE;AAAA,IACA,OAAO;AAAA,MACH,MAAM;AAAA,MACN,aAAa;AAAA,MACb,SAAS,CAAC,QAAQ;AACd,eAAO,iBAAiB,IAAI,KAAK,aAAa;AAAA,MAClD;AAAA,IACJ;AAAA,EACJ;AACJ,EAAE;;;AFrCF,IAAO,8BAAQ,WAAW;AAAA,EACtB,gBAAgB;AAAA,EAChB,eAAe,CAAC,SAAS,IAAI;AACjC,CAAC;",
  "names": ["defineDocumentType"]
}
